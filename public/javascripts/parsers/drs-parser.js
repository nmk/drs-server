drsParser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "discourse_referent": parse_discourse_referent,
        "drs": parse_drs,
        "lambda_parameter": parse_lambda_parameter,
        "name": parse_name,
        "prefix_relation": parse_prefix_relation,
        "presuppositions": parse_presuppositions,
        "relation_argument": parse_relation_argument,
        "relation_arguments": parse_relation_arguments,
        "space": parse_space,
        "store": parse_store,
        "universe": parse_universe,
        "variable": parse_variable
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "drs";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_drs() {
        var cacheKey = 'drs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result33 = parse_space();
        var result3 = result33 !== null ? result33 : '';
        if (result3 !== null) {
          var result4 = [];
          var result32 = parse_lambda_parameter();
          while (result32 !== null) {
            result4.push(result32);
            var result32 = parse_lambda_parameter();
          }
          if (result4 !== null) {
            var result31 = parse_presuppositions();
            var result5 = result31 !== null ? result31 : '';
            if (result5 !== null) {
              var result30 = parse_space();
              var result6 = result30 !== null ? result30 : '';
              if (result6 !== null) {
                var result29 = parse_store();
                var result7 = result29 !== null ? result29 : '';
                if (result7 !== null) {
                  var result28 = parse_space();
                  var result8 = result28 !== null ? result28 : '';
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "[") {
                      var result9 = "[";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"[\"");
                      }
                    }
                    if (result9 !== null) {
                      var result27 = parse_space();
                      var result10 = result27 !== null ? result27 : '';
                      if (result10 !== null) {
                        var result26 = parse_universe();
                        var result11 = result26 !== null ? result26 : '';
                        if (result11 !== null) {
                          var result25 = parse_space();
                          var result12 = result25 !== null ? result25 : '';
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === "|") {
                              var result13 = "|";
                              pos += 1;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"|\"");
                              }
                            }
                            if (result13 !== null) {
                              var result14 = [];
                              var result24 = parse_prefix_relation();
                              while (result24 !== null) {
                                result14.push(result24);
                                var result24 = parse_prefix_relation();
                              }
                              if (result14 !== null) {
                                var result23 = parse_space();
                                var result15 = result23 !== null ? result23 : '';
                                if (result15 !== null) {
                                  if (input.substr(pos, 1) === "]") {
                                    var result16 = "]";
                                    pos += 1;
                                  } else {
                                    var result16 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"]\"");
                                    }
                                  }
                                  if (result16 !== null) {
                                    if (input.substr(pos, 1) === ">") {
                                      var result22 = ">";
                                      pos += 1;
                                    } else {
                                      var result22 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\">\"");
                                      }
                                    }
                                    var result17 = result22 !== null ? result22 : '';
                                    if (result17 !== null) {
                                      if (input.substr(pos, 1) === ">") {
                                        var result21 = ">";
                                        pos += 1;
                                      } else {
                                        var result21 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\">\"");
                                        }
                                      }
                                      var result18 = result21 !== null ? result21 : '';
                                      if (result18 !== null) {
                                        var result20 = parse_space();
                                        var result19 = result20 !== null ? result20 : '';
                                        if (result19 !== null) {
                                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                        } else {
                                          var result1 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lambda_parameters, presuppositions, store, universe, conditions) {
              result = {
                _type: 'DRS::DRS'
              };
          
              if(universe && universe.length != 0)
                result.universe = universe
          
              if(conditions && conditions.length != 0)
                result.conditions = conditions
          
              if(lambda_parameters && lambda_parameters.length != 0)
                result.lambda_parameters = lambda_parameters;
          
              if(store && store.length != 0)
                result.store_variables = store;
          
              return result;
            })(result1[1], result1[2], result1[4], result1[8], result1[11])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lambda_parameter() {
        var cacheKey = 'lambda_parameter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "^") {
          var result3 = "^";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_name();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(var_name) {
              return {
                _type: 'DRS::LambdaParameter',
                name : var_name }
            })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_store() {
        var cacheKey = 'store@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_name();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result5 = ",";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var result11 = parse_space();
              var result8 = result11 !== null ? result11 : '';
              if (result8 !== null) {
                var result9 = parse_name();
                if (result9 !== null) {
                  if (input.substr(pos, 1) === ",") {
                    var result10 = ",";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = [result8, result9, result10];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              while (result7 !== null) {
                result6.push(result7);
                var savedPos2 = pos;
                var result11 = parse_space();
                var result8 = result11 !== null ? result11 : '';
                if (result8 !== null) {
                  var result9 = parse_name();
                  if (result9 !== null) {
                    if (input.substr(pos, 1) === ",") {
                      var result10 = ",";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result10 !== null) {
                      var result7 = [result8, result9, result10];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
              result = [{
                _type: 'DRS::StoreVariable',
                name : fst }
              ]
          
              for(var i = 0; i < rest.length; i++){
                result.push({
                  _type: 'DRS::StoreVariable',
                  name : rest[i][1]
                });
              }
              return result;
            })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_presuppositions() {
        var cacheKey = 'presuppositions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result12 = "<";
          pos += 1;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        var result3 = result12 !== null ? result12 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_drs();
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var result11 = parse_space();
              var result9 = result11 !== null ? result11 : '';
              if (result9 !== null) {
                var result10 = parse_drs();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result6.push(result8);
                var savedPos2 = pos;
                var result11 = parse_space();
                var result9 = result11 !== null ? result11 : '';
                if (result9 !== null) {
                  var result10 = parse_drs();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result7 = "}";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
              result = [fst];
              for(var i = 0; i < rest.length; i++)
                result.push(rest[i][1]);
          
              return result;
            })(result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_universe() {
        var cacheKey = 'universe@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_discourse_referent();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result8 = parse_space();
          if (result8 !== null) {
            var result6 = [];
            while (result8 !== null) {
              result6.push(result8);
              var result8 = parse_space();
            }
          } else {
            var result6 = null;
          }
          if (result6 !== null) {
            var result7 = parse_discourse_referent();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result8 = parse_space();
            if (result8 !== null) {
              var result6 = [];
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_space();
              }
            } else {
              var result6 = null;
            }
            if (result6 !== null) {
              var result7 = parse_discourse_referent();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
              result = [fst];
              for(var i = 0; i < rest.length; i++){
                result.push(rest[i][1]);
              }
              return result;
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_discourse_referent() {
        var cacheKey = 'discourse_referent@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_name();
        var result2 = result1 !== null
          ? (function(name) {
              return {
                '_type': 'DRS::DiscourseReferent',
                'name' : name }
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefix_relation() {
        var cacheKey = 'prefix_relation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result11 = parse_space();
        var result3 = result11 !== null ? result11 : '';
        if (result3 !== null) {
          var result4 = parse_name();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result10 = parse_relation_arguments();
              while (result10 !== null) {
                result6.push(result10);
                var result10 = parse_relation_arguments();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result9 = parse_space();
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(relation_name, relation_arguments) {
              var result = {
                _type: 'DRS::Relation',
                name:   relation_name
              };
          
              if(relation_arguments && relation_arguments.length != 0)
                result.arguments = relation_arguments[0];
              else
                result.arguments = [];
          
              return result;
            })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relation_arguments() {
        var cacheKey = 'relation_arguments@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_relation_argument();
        if (result3 !== null) {
          var result11 = parse_space();
          var result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result10 = parse_space();
              var result8 = result10 !== null ? result10 : '';
              if (result8 !== null) {
                var result9 = parse_relation_argument();
                if (result9 !== null) {
                  var result6 = [result7, result8, result9];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result10 = parse_space();
                var result8 = result10 !== null ? result10 : '';
                if (result8 !== null) {
                  var result9 = parse_relation_argument();
                  if (result9 !== null) {
                    var result6 = [result7, result8, result9];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
              result = [fst];
              for(var i = 0; i < rest.length; i++){
                result.push(rest[i][2]);
              }
              return result;
            })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relation_argument() {
        var cacheKey = 'relation_argument@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_prefix_relation();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_variable();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable() {
        var cacheKey = 'variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_name();
        var result2 = result1 !== null
          ? (function(name) {
             return {
               _type: 'DRS::Variable',
               name:  name
             };
           })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_name() {
        var cacheKey = 'name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[$^{}\\\\'"A-Za-z0-9_\-]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[$^{}\\\\\\\\'\"A-Za-z0-9_\\-]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[$^{}\\\\'"A-Za-z0-9_\-]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[$^{}\\\\\\\\'\"A-Za-z0-9_\\-]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) { return chars.join(''); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\r\\n]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	\\r\\n]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
